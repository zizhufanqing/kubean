---
- hosts: k8s_cluster
  gather_facts: false
  become: yes
  vars:
    check_connection: true
    fetch_os_type: true
    check_existing_k8s_service: true

  tasks:
    - name: Perform check_connection
      ansible.builtin.ping:
      register: connection_ping_result
      ignore_errors: true
      when:
        - check_connection
    - name: Process connection_ping_result
      set_fact:
        check_connection_result: "{{ connection_ping_result.failed == false }}"
      when:
        - check_connection
    - name: Show check_connection result
      debug: var=check_connection_result
      when:
        - check_connection


    - name: Perform fetch_os_type
      shell: cat /etc/os-release
      register: os_release_cmd_result
      ignore_errors: true
      when:
        - fetch_os_type
    - name: Process fetch_os_type_result
      set_fact:
        fetch_os_type_result: "{{ dict(_keys|zip(_vals)) | combine( { 'RAW_OUTPUT': os_release_cmd_result.stdout } ) }}"
      vars:
        _arr: "{{ os_release_cmd_result.stdout.splitlines() | map('trim') | select() | list }}"
        _keys: "{{ _arr | map('split', '=') | map('first') | map('replace', '\"' ,'') | list }}"
        _vals: "{{ _arr | map('split', '=') | map('last') | map('replace', '\"' , '') | list }}"
      when:
        - fetch_os_type
    - name: Show fetch_os_type result
      debug: var=fetch_os_type_result
      when:
        - fetch_os_type



    - name: Perform check_existing_k8s_service
      shell: bash -c "kubectl get namespace" || bash -c "ps -ef | grep kubelet"
      register: check_k8s_cmd_result
      ignore_errors: true
      when:
        - check_existing_k8s_service
    - name: Process check_k8s_cmd_result
      set_fact:
        check_existing_k8s_service_result: "{{ check_k8s_cmd_result.rc == 0 }}"
      when:
        - check_existing_k8s_service
    - name: Show check_existing_k8s_service result
      debug: var=check_existing_k8s_service_result
      when:
        - check_existing_k8s_service
