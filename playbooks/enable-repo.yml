---
- hosts: k8s_cluster
  become: yes
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  vars:
    yum_repo_name: extension
    yum_repo_src_path: /etc/yum.repos.d
    yum_repo_bak_path: /etc/yum.repos.d.bak
    yum_repo_url_list: []
  tasks:

    # Install
    - name: Set os_family fact for Kylin Linux Advanced Server
      set_fact:
        ansible_os_family: "RedHat"
      when: ansible_distribution == "Kylin Linux Advanced Server"

    - name: Checking if "{{ yum_repo_name }}" exists
      stat:
        path: "{{ yum_repo_src_path }}/{{ yum_repo_name }}.repo"
      register: file_data
      when:
        - ansible_os_family == "RedHat"

    - name: Move(Backup) original yum repo if "{{ yum_repo_name }}" not exist
      shell: >-
        mkdir -p {{ yum_repo_bak_path }}/ &&
        mv {{ yum_repo_src_path }}/ {{ yum_repo_bak_path }}/ &&
        mkdir -p {{ yum_repo_src_path }}/
      when: 
        - ansible_os_family == "RedHat"
        - not file_data.stat.exists and ( yum_repo_url_list | length > 0 )
        - not undo|default(false)|bool

    - name: Enable "{{ yum_repo_name }}" yum repositories
      ansible.builtin.yum_repository:
        name: "{{ yum_repo_name }}-{{ url_index }}"
        description: "kubean {{ yum_repo_name }} {{ url_index }}"
        file: "{{ yum_repo_name }}"
        baseurl: "{{ url_item }}"
        gpgcheck: no
      loop: "{{ yum_repo_url_list }}"
      loop_control:
        loop_var: url_item
        index_var: url_index
      when:
        - ansible_os_family == "RedHat"
        - not undo|default(false)|bool

    # Uninstall

    - name: Clean extension repo
      shell: >
        rm -rf {{ yum_repo_src_path }}/{{ yum_repo_name }}.repo
      args:
        executable: /bin/bash
      register: clean_repo_result
      until: clean_repo_result.rc == 0
      retries: 5
      delay: 5
      when:
        - undo|default(false)|bool
        - ansible_os_family == "RedHat"
        - file_data.stat.exists

    - name: Checking if "{{ yum_repo_bak_path }}" exists
      stat:
        path: "{{ yum_repo_bak_path }}"
      register: repo_bak_path
      when:
        - undo|default(false)|bool
        - ansible_os_family == "RedHat"

    - name: Restore "{{ yum_repo_src_path }}" repo
      shell: >
        mv {{ yum_repo_bak_path }}/* {{ yum_repo_src_path }}/ &&
        rm -rf {{ yum_repo_bak_path }}
      args:
        executable: /bin/bash
      register: restore_repo_result
      until: restore_repo_result.rc == 0
      retries: 5
      delay: 5
      when:
        - undo|default(false)|bool
        - ansible_os_family == "RedHat"
        - repo_bak_path.stat.exists
